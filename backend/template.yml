AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Resources:

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      Cors: 
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoUserPoolAuthorizer
        AddDefaultAuthorizerToCorsPreflight: False
        Authorizers: 
          CognitoUserPoolAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn 

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: username
          AttributeType: S
        - AttributeName: ts
          AttributeType: S
      KeySchema:
        - AttributeName: username
          KeyType: HASH
        - AttributeName: ts
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
            
  getDataFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: handler.hello
      Runtime: nodejs12.x
      CodeUri: ./getData
      Environment:
        Variables:
          TABLE_NAME: !Ref UsersTable
      Role:
        Fn::GetAtt:
          - LambdaRole
          - Arn
      Events:
        HelloAPI:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /hello
            Method: POST
  
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: test_project_user_pool
      LambdaConfig:
        PreSignUp: !GetAtt PreSignupLambdaFunction.Arn
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: sam_api_gateway_cup_auth_cognito_client
      UserPoolId: !Ref CognitoUserPool

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: 5qxj30m11k
      UserPoolId: !Ref CognitoUserPool

  PreSignupLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
        exports.handler = async (event, context, callback) => {
          event.response = { autoConfirmUser: true }
          return event
        }
      Handler: index.handler
      MemorySize: 128
      Runtime: nodejs12.x
      Timeout: 3

  LambdaCognitoUserPoolExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PreSignupLambdaFunction.Arn
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub 'arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${CognitoUserPool}'

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: GatewayRolePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                  - logs:*
                Resource: "*"


Outputs:
  Region:
    Description: "Region"
    Value: !Ref AWS::Region

  ApiId:
    Description: "API ID"
    Value: !Ref Api

  ApiUrl:
    Description: "API endpoint URL for Prod environment"
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/dev/'
  
  CognitoUserPoolId:
    Description: "Cognito User Pool Id"
    Value: !Ref CognitoUserPool

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client Id"
    Value: !Ref CognitoUserPoolClient